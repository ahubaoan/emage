//go:build linux
// +build linux

package exitsnoop

import (
	"bytes"
	"context"
	"encoding/binary"
	"errors"
	"fmt"
	"github.com/ahubaoan/emage/config/module"
	"github.com/cilium/ebpf"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/perf"
	"github.com/cilium/ebpf/ringbuf"
	"golang.org/x/sys/unix"
	"log"
)

// $BPF_CLANG and $BPF_CFLAGS are set by the Makefile.
//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc $BPF_CLANG -cflags $BPF_CFLAGS bpf exitsnoop.c -- -I../headers

type bpfEvent struct {
	StartTime uint64
	ExitTime  uint64
	Pid       uint32
	Tid       uint32
	Ppid      uint32
	Sig       uint32
	ExitCode  uint32
	Comm      [16]uint8
}

var DefaultKernConfig = module.ExitSnoopKern{
	FilterCroup:     false,
	TargetPid:       0,
	TraceFailedOnly: false,
}

type ExitSnoop struct {
	Ctx        context.Context
	CancelFunc context.CancelFunc
}

func genConsts(conf, dft module.ExitSnoopKern) map[string]interface{} {
	contMap := make(map[string]interface{}, 0)
	if conf.FilterCroup != dft.FilterCroup {
		contMap["filter_cg"] = conf.FilterCroup
	}
	if conf.TargetPid != dft.TargetPid {
		contMap["target_pid"] = conf.TargetPid
	}
	if conf.TraceFailedOnly != dft.TraceFailedOnly {
		contMap["trace_failed_only"] = conf.TraceFailedOnly
	}
	return contMap
}

func RewriteConstants(obj *bpfObjects, spec *ebpf.CollectionSpec) error {
	if len(obj.Consts) == 0 {
		return nil
	}
	roData := spec.Maps[".rodata"]
	if roData != nil && roData.BTF != nil {
		err := spec.RewriteConstants(obj.Consts)
		if err != nil {
			fmt.Println("RewriteConstants err=", err.Error())
			return err
		}
	}
	return nil
}

func Start(ctx context.Context, c module.ExitSnoopKern) {

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{Consts: genConsts(c, DefaultKernConfig)}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	// The first two arguments are taken from the following pathname:
	// /sys/kernel/debug/tracing/events/sched/sched_process_exit
	kp, err := link.Tracepoint("sched", "sched_process_exit", objs.SchedProcessExit)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer kp.Close()

	rd, err := perf.NewReader(objs.Events, 4069)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-ctx.Done()

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		log.Printf("pid: %d\tppid: %d\tcomm: %s\texit_code:%d\n", event.Pid, event.Ppid,
			unix.ByteSliceToString(event.Comm[:]), event.ExitCode)
	}

}
