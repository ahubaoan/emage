//go:build linux
// +build linux

// This program demonstrates attaching an eBPF program to a kernel tracepoint.
// The eBPF program will be attached to the page allocation tracepoint and
// prints out the number of times it has been reached. The tracepoint fields
// are printed into /sys/kernel/debug/tracing/trace_pipe.
package execsnoop

import (
	"bytes"
	"context"
	"encoding/binary"
	"errors"
	"fmt"
	"github.com/cilium/ebpf"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"golang.org/x/sys/unix"
	"log"
)

// $BPF_CLANG and $BPF_CFLAGS are set by the Makefile.
//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc $BPF_CLANG -cflags $BPF_CFLAGS bpf execsnoop.c -- -I../headers

type bpfEvent struct {
	Pid      uint32
	PPid     uint32
	Comm     [16]uint8
	FileName [256]uint8
}

type ExecSnoop struct {
	Ctx        context.Context
	CancelFunc context.CancelFunc
}

var Consts map[string]interface{}

func init() {
	Consts = make(map[string]interface{})
}

func RewriteConstatns(obj *bpfObjects, spec *ebpf.CollectionSpec) error {
	rodata := spec.Maps[".rodata"]
	if rodata != nil && rodata.BTF != nil {
		err := spec.RewriteConstants(obj.Consts)
		if err != nil {
			fmt.Println("RewriteConstants err=", err.Error())
			return err
		}
	}
	return nil
}

func (e *ExecSnoop) Exit() {
	e.CancelFunc()
}

func (e *ExecSnoop) Start() {

	e.Ctx, e.CancelFunc = context.WithCancel(context.TODO())

	Consts["filter_cg"] = int64(4)

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{Consts: Consts}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	// Open a tracepoint and attach the pre-compiled program. Each time
	// the kernel function enters, the program will increment the execution
	// counter by 1. The read loop below polls this map value once per
	// second.
	// The first two arguments are taken from the following pathname:
	// /sys/kernel/debug/tracing/events/kmem/sys_enter_execve
	kp, err := link.Tracepoint("syscalls", "sys_enter_execve", objs.SysEnterExecve)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer kp.Close()

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.Events)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-e.Ctx.Done()

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		log.Printf("pid: %d\tppid: %d\tcomm: %s\tfile:%s\n", event.Pid, event.PPid,
			unix.ByteSliceToString(event.Comm[:]), unix.ByteSliceToString(event.FileName[:]))
	}

}
