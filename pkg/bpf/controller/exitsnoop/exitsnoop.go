//go:build linux
// +build linux

package exitsnoop

import (
	"bytes"
	"context"
	"encoding/binary"
	"errors"
	"github.com/ahubaoan/emage/pkg/bpf"
	"github.com/ahubaoan/emage/pkg/bpf/module"
	"github.com/ahubaoan/emage/pkg/logger"
	"github.com/cilium/ebpf"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/perf"
	"github.com/cilium/ebpf/ringbuf"
	"go.uber.org/zap"
	"golang.org/x/sys/unix"
)

// $BPF_CLANG and $BPF_CFLAGS are set by the Makefile.
//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc $BPF_CLANG -cflags $BPF_CFLAGS bpf exitsnoop.c -- -I../headers

type exitSnoopBpfEvent struct {
	StartTime uint64
	ExitTime  uint64
	Pid       uint32
	Tid       uint32
	Ppid      uint32
	Sig       uint32
	ExitCode  uint32
	Comm      [16]uint8
}

func RewriteConstants(obj *bpfObjects, spec *ebpf.CollectionSpec) error {
	if len(obj.Consts) == 0 {
		return nil
	}
	roData := spec.Maps[".rodata"]
	if roData != nil && roData.BTF != nil {
		err := spec.RewriteConstants(obj.Consts)
		if err != nil {
			logger.ComLog.Info("RewriteConstants err", zap.Error(err))
			return err
		}
	}
	return nil
}

func Start(ctx context.Context, c module.ExitSnoopKern) {

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{Consts: bpf.KernConstantsGen(c)}
	if err := loadBpfObjects(&objs, nil); err != nil {
		logger.ComLog.Error("loading objects: %v", zap.Error(err))
	}
	defer objs.Close()

	// The first two arguments are taken from the following pathname:
	// /sys/kernel/debug/tracing/events/sched/sched_process_exit
	kp, err := link.Tracepoint("sched", "sched_process_exit", objs.SchedProcessExit)
	if err != nil {
		logger.ComLog.Error("opening tracepoint", zap.Error(err))
	}
	defer kp.Close()

	rd, err := perf.NewReader(objs.Events, 4069)
	if err != nil {
		logger.ComLog.Error("opening ringbuf reader", zap.Error(err))
	}
	defer rd.Close()

	go func() {
		<-ctx.Done()

		if err := rd.Close(); err != nil {
			logger.ComLog.Error("closing ringbuf reader", zap.Error(err))
		}
	}()

	logger.ComLog.Info("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	var event exitSnoopBpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				logger.ComLog.Error("Received signal, exiting..")
				return
			}
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			logger.ComLog.Error("parsing ringbuf event", zap.Error(err))
			continue
		}

		logger.BpfLog.Info("execsnoop output",
			zap.String("bpf", "execsnoop"),
			zap.Uint64("start_time", event.StartTime),
			zap.Uint64("exit_time", event.ExitTime),
			zap.Uint32("pid", event.Pid),
			zap.Uint32("tid", event.Tid),
			zap.Uint32("Sig", event.Sig),
			zap.Uint32("exit_code", event.ExitCode),
			zap.String("comm", unix.ByteSliceToString(event.Comm[:])))
	}
}
